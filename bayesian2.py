# -*- coding: utf-8 -*-
"""bayesian2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-FG15GHFByOmIZTwcnSq1txY4Vzi-3nz

**SCHOOL DATA EXAMPLE**

**Pooled**
"""

import arviz as az
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm

y = np.array([28, 8, -3, 7, -1, 1, 18, 12])
sigma = np.array([15, 10, 16, 11, 9, 11, 10, 18])
J = len(y)

with pm.Model() as pooled:
    mu = pm.Normal("mu", 0, sigma=1e6)
    obs = pm.Normal("obs", mu, sigma=sigma, observed=y)
    trace_p = pm.sample(2000)

pm.plot_trace(trace_p,show=True)

pm.summary(trace_p, round_to=2)

from pymc import model_to_graphviz
gv = model_to_graphviz(pooled)
gv.format = 'png'
gv.render(filename='model_graph')

"""**Hierarchical modelling**"""

with pm.Model() as hierarchical:
    eta = pm.Normal("eta", 0, 1, shape=J)
    mu = pm.Normal("mu", 0, sigma=10)
    tau = pm.HalfNormal("tau", 10)
    theta = pm.Deterministic("theta", mu + tau * eta)
    obs = pm.Normal("obs", theta, sigma=sigma, observed=y)
    trace_h = pm.sample(2000, target_accept=0.9)

pm.plot_trace(trace_h,show=True)
pm.summary(trace_h, round_to=2)

from pymc import model_to_graphviz
gv = model_to_graphviz(hierarchical)
gv.format = 'png'
gv.render(filename='model_graph')

az.plot_forest(trace_h, var_names="theta", combined=True)
plt.show()

import arviz as az

az.plot_forest(trace_h, var_names=["eta", "mu", "tau", "theta"], combined=True)

with pooled:
    pm.compute_log_likelihood(trace_p)

with hierarchical:
    pm.compute_log_likelihood(trace_h)

pooled_loo = az.loo(trace_p)
hierarchical_loo = az.loo(trace_h)

df_comp_loo = az.compare({"hierarchical": trace_h, "pooled": trace_p})
df_comp_loo

"""**New York hospitals example**"""

import os
import pandas as pd
filename = 'manhattan.csv'
df = pd.read_csv(filename)
data_ns = df['Cases'].values
data_ks = df['Deaths'].values
df

"""**Entirely Pooled model**"""

cases = data_ns.sum()
cases

deaths = data_ks.sum()
deaths


import arviz as az
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm

with pm.Model() as model1:
    alpha = pm.Beta('alpha', alpha=1, beta=1)
    ks = pm.Binomial('ks', n=cases, p=alpha, observed=deaths)
    trace1 = pm.sample(5000)

pm.plot_trace(trace1,show=True)

pm.summary(trace1, round_to=2)

from pymc import model_to_graphviz
gv = model_to_graphviz(model1)
gv.format = 'png'
gv.render(filename='model1_graph')

"""**Hierarchical Model**"""

with pm.Model() as model4:
    alpha = pm.Gamma('alpha', alpha=4, beta=0.5)
    beta = pm.Gamma('beta', alpha=4, beta=0.5)
    xs = pm.Beta('xs', alpha, beta, shape=len(data_ns))
    ks = pm.Binomial('ks', n=data_ns, p=xs, observed=data_ks)
    trace4 = pm.sample(5000)

pm.plot_trace(trace4,show=True)

with model4:
    az.plot_posterior(trace4, var_names=['xs'])

plt.show()

with model4:
    az.plot_forest(trace4, var_names="xs")

plt.show()

"""**Coal mining disasters change-point model**"""

import arviz as az
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pymc as pm

disaster_data = pd.Series(
    [4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6, 3, 3, 5, 4, 5, 3, 1, 4, 4, 1, 5, 5, 3, 4, 2, 5, 2, 2, 3, 4, 2, 1, 3, np.nan, 2, 1, 1, 1, 1, 3, 0, 0, 1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 3, 3, 1, np.nan, 2, 1, 1, 1, 1, 2, 4, 2, 0, 0, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])
years = np.arange(1851, 1962)

plt.plot(years, disaster_data, "o", markersize=8, alpha=0.4)
plt.ylabel("Disaster count")
plt.xlabel("Year");
plt.show()

"""**idata Exponential Priors**"""

with pm.Model() as disaster_model:
    switchpoint = pm.DiscreteUniform("switchpoint", lower=years.min(), upper=years.max())
    # Priors for pre- and post-switch rates number of disasters
    early_rate = pm.Exponential("early_rate", 1.0)
    late_rate = pm.Exponential("late_rate", 1.0)
    # Allocate appropriate Poisson rates to years before and after current
    rate = pm.math.switch(switchpoint >= years, early_rate, late_rate)
    disasters = pm.Poisson("disasters", rate, observed=disaster_data)

with disaster_model:
    idata = pm.sample(10000)

axes_arr = az.plot_trace(idata)
plt.show()

with disaster_model:
    az.plot_posterior(idata, var_names=['switchpoint', 'disasters_missing'])

plt.show()

idata

with disaster_model:
    az.plot_posterior(idata, var_names=['early_rate','late_rate'])

plt.show()

for ax in axes_arr.flatten():
    if ax.get_title() == "switchpoint":
        labels = [label.get_text() for label in ax.get_xticklabels()]
        ax.set_xticklabels(labels, rotation=45, ha="right")
        break

plt.figure(figsize=(10, 8))
plt.plot(years, disaster_data, ".", alpha=0.6)
plt.ylabel("Number of accidents", fontsize=16)
plt.xlabel("Year", fontsize=16)

trace = idata.posterior.stack(draws=("chain", "draw"))

plt.vlines(trace["switchpoint"].mean(), disaster_data.min(), disaster_data.max(), color="C1")
average_disasters = np.zeros_like(disaster_data, dtype="float")
for i, year in enumerate(years):
    idx = year < trace["switchpoint"]
    average_disasters[i] = np.mean(np.where(idx, trace["early_rate"], trace["late_rate"]))

sp_hpd = az.hdi(idata, var_names=["switchpoint"])["switchpoint"].values
plt.fill_betweenx(
    y=[disaster_data.min(), disaster_data.max()], x1=sp_hpd[0],  x2=sp_hpd[1], alpha=0.5,  color="C1",)
plt.plot(years, average_disasters, "k--", lw=2);

plt.show()

"""**idata2 Gamma Priors**"""

with pm.Model() as disaster_model2:
    switchpoint = pm.DiscreteUniform("switchpoint", lower=years.min(), upper=years.max())
    # Priors for pre- and post-switch rates number of disasters
    early_rate = pm.Gamma("early_rate", 1.0, 1.0)
    late_rate = pm.Gamma("late_rate", 1.0, 1.0)
    # Allocate appropriate Poisson rates to years before and after current
    rate = pm.math.switch(switchpoint >= years, early_rate, late_rate)
    disasters = pm.Poisson("disasters", rate, observed=disaster_data)

with disaster_model2:
    idata2 = pm.sample(10000)

axes_arr = az.plot_trace(idata2)
plt.show()

with disaster_model2:
    az.plot_posterior(idata2, var_names=['switchpoint', 'early_rate','late_rate'])
plt.show()

"""**Selection of best Model**"""

with disaster_model:
    pm.compute_log_likelihood(idata)

with disaster_model2:
    pm.compute_log_likelihood(idata2)

exp_loo = az.loo(idata)
gamma_loo = az.loo(idata2)

df_comp_loo = az.compare({"exponential": idata, "gamma": idata2})
df_comp_loo